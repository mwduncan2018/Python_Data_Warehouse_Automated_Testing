[{"keyword": "Feature", "uri": "features\\landing_zone_to_core.feature", "name": "Landing Zone to Core", "id": "features\\landing_zone_to_core.feature", "line": 2, "description": "", "tags": [{"name": "landing_zone_to_core", "line": 1}], "elements": [{"keyword": "Scenario", "id": "test_order_etl_orders_arrive_no_duplicates", "name": "Order ETL, Orders Arrive, No Duplicates", "line": 4, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "a type 1 source file", "line": 5, "match": {"location": ""}, "result": {"status": "passed", "duration": 33556599}}, {"keyword": "And", "name": "a type 2 source file", "line": 6, "match": {"location": ""}, "result": {"status": "passed", "duration": 203300}}, {"keyword": "When", "name": "ETL is executed from sources to landing zone", "line": 7, "match": {"location": ""}, "result": {"status": "passed", "duration": 34299}}, {"keyword": "And", "name": "ETL is executed from landing zone to core", "line": 8, "match": {"location": ""}, "result": {"status": "passed", "duration": 28799}}, {"keyword": "Then", "name": "orders from the landing zone arrive in the core db", "line": 9, "match": {"location": ""}, "result": {"status": "passed", "duration": 5556399}}, {"keyword": "And", "name": "there are no duplicate orders", "line": 10, "match": {"location": ""}, "result": {"status": "passed", "duration": 2050999}}]}, {"keyword": "Scenario", "id": "test_album_etl_albums_arrive_no_duplicates", "name": "Album ETL, Albums Arrive, No Duplicates", "line": 12, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "a type 1 source file", "line": 13, "match": {"location": ""}, "result": {"status": "passed", "duration": 55902500}}, {"keyword": "And", "name": "a type 2 source file", "line": 14, "match": {"location": ""}, "result": {"status": "passed", "duration": 189700}}, {"keyword": "When", "name": "ETL is executed from sources to landing zone", "line": 15, "match": {"location": ""}, "result": {"status": "passed", "duration": 34700}}, {"keyword": "And", "name": "ETL is executed from landing zone to core", "line": 16, "match": {"location": ""}, "result": {"status": "passed", "duration": 31499}}, {"keyword": "Then", "name": "albums from the landing zone arrive in the core db", "line": 17, "match": {"location": ""}, "result": {"status": "passed", "duration": 4561399}}, {"keyword": "And", "name": "there are no duplicate albums", "line": 18, "match": {"location": ""}, "result": {"status": "passed", "duration": 1865200}}]}, {"keyword": "Scenario", "id": "test_album_etl_conversion_to_fahrenheit", "name": "Album ETL, Conversion to Fahrenheit", "line": 20, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "a type 1 source file", "line": 21, "match": {"location": ""}, "result": {"status": "passed", "duration": 49600000}}, {"keyword": "When", "name": "ETL is executed from sources to landing zone", "line": 22, "match": {"location": ""}, "result": {"status": "passed", "duration": 56299}}, {"keyword": "And", "name": "ETL is executed from landing zone to core", "line": 23, "match": {"location": ""}, "result": {"status": "passed", "duration": 39299}}, {"keyword": "Then", "name": "temperature is displayed as fahrenheit", "line": 24, "match": {"location": ""}, "result": {"status": "passed", "duration": 38100}}]}, {"keyword": "Scenario", "id": "test_customer_etl_no_duplicates", "name": "Customer ETL, No Duplicates", "line": 26, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "a type 2 source file", "line": 27, "match": {"location": ""}, "result": {"status": "passed", "duration": 67732100}}, {"keyword": "When", "name": "ETL is executed from sources to landing zone", "line": 28, "match": {"location": ""}, "result": {"status": "passed", "duration": 61600}}, {"keyword": "And", "name": "ETL is executed from landing zone to core", "line": 29, "match": {"location": ""}, "result": {"status": "passed", "duration": 43600}}, {"keyword": "Then", "name": "customers from the landing zone arrive in the core db", "line": 30, "match": {"location": ""}, "result": {"status": "passed", "duration": 5420499}}, {"keyword": "And", "name": "there are no duplicate customers", "line": 31, "match": {"location": ""}, "result": {"status": "failed", "error_message": "fixturefunc = <function _ at 0x000001411D728FE0>, request = <FixtureRequest for <Function test_customer_etl_no_duplicates>>\nkwargs = {'scenario_context': {'core_cur': <cursor object at 0x000001411D71AF80; closed: 0>, 'landing_zone_cur': <cursor object...0}, 'Customer': {'FirstName': 'Millard', 'LastName': 'Fillmore'}, 'OrderLocation': 'Birmingham', 'Temperature': 10}]}}}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\nvenv\\Lib\\site-packages\\_pytest\\fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nscenario_context = {'core_cur': <cursor object at 0x000001411D71AF80; closed: 0>, 'landing_zone_cur': <cursor object at 0x000001411D71B3E...10}, 'Customer': {'FirstName': 'Millard', 'LastName': 'Fillmore'}, 'OrderLocation': 'Birmingham', 'Temperature': 10}]}}\n\n    @then(\"there are no duplicate customers\")\n    def _(scenario_context: dict):\n        # Get customers in the landing zone\n        landing_zone_cur = scenario_context['landing_zone_cur']\n        sql = \"SELECT full_name, first_name, last_name FROM customers;\"\n        landing_zone_cur.execute(sql)\n        lz_customers = landing_zone_cur.fetchall()\n    \n        # Get customers in core\n        core_cur = scenario_context['core_cur']\n        sql = \"SELECT first_name, last_name FROM customers;\"\n        core_cur.execute(sql)\n        core_customers = core_cur.fetchall()\n    \n        # Verify there are no duplicate customers\n        for lz_customer in lz_customers:\n            lz_first_name = lz_customer[1]\n            lz_last_name = lz_customer[2]\n            if not (lz_customer[0] == \"\"):\n                lz_first_name = lz_customer[0].split(' ')[0]\n                lz_last_name = lz_customer[0].split(' ')[1]\n            count = 0\n            for core_customer in core_customers:\n                if (lz_first_name == core_customer[0] and lz_last_name == core_customer[1]):\n                    count += 1\n            count = 2 ################################################################################################################################################################\n>           assert count == 1, \"Duplicate customer should not occur: \" +lz_first_name + ' ' + lz_last_name\nE           AssertionError: Duplicate customer should not occur: Benjamin Harrison\nE           assert 2 == 1\n\ntests\\steps\\test_landing_zone_to_core.py:185: AssertionError", "duration": 2721599}}]}, {"keyword": "Scenario", "id": "test_customer_etl_conversion_to_first_name_and_last_name", "name": "Customer ETL, Conversion to First Name and Last Name", "line": 33, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "a type 2 source file", "line": 34, "match": {"location": ""}, "result": {"status": "passed", "duration": 42267199}}, {"keyword": "When", "name": "ETL is executed from sources to landing zone", "line": 35, "match": {"location": ""}, "result": {"status": "passed", "duration": 50900}}, {"keyword": "And", "name": "ETL is executed from landing zone to core", "line": 36, "match": {"location": ""}, "result": {"status": "passed", "duration": 67999}}, {"keyword": "Then", "name": "the Full Name field has been converted to First Name and Last Name", "line": 37, "match": {"location": ""}, "result": {"status": "passed", "duration": 3972500}}]}]}, {"keyword": "Feature", "uri": "features\\source_1_to_landing_zone.feature", "name": "Source 1 to Landing Zone", "id": "features\\source_1_to_landing_zone.feature", "line": 3, "description": "", "tags": [{"name": "source_to_landing_zone", "line": 2}], "elements": [{"keyword": "Scenario", "id": "test_order_etl", "name": "Order ETL", "line": 5, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "a type 1 source file", "line": 6, "match": {"location": ""}, "result": {"status": "passed", "duration": 26483399}}, {"keyword": "When", "name": "ETL is executed from sources to landing zone", "line": 7, "match": {"location": ""}, "result": {"status": "passed", "duration": 51900}}, {"keyword": "Then", "name": "all orders from type 1 source arrive in the landing zone", "line": 8, "match": {"location": ""}, "result": {"status": "passed", "duration": 33899}}]}, {"keyword": "Scenario", "id": "test_order_etl_blank_order_location_defaults_to_online", "name": "Order ETL, Blank Order Location Defaults to Online", "line": 10, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "a type 1 source file", "line": 11, "match": {"location": ""}, "result": {"status": "passed", "duration": 43152199}}, {"keyword": "When", "name": "ETL is executed from sources to landing zone", "line": 12, "match": {"location": ""}, "result": {"status": "passed", "duration": 48700}}, {"keyword": "Then", "name": "a blank order_location defaults to Online", "line": 13, "match": {"location": ""}, "result": {"status": "passed", "duration": 29599}}]}, {"keyword": "Scenario", "id": "test_album_etl", "name": "Album ETL", "line": 15, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "a type 1 source file", "line": 16, "match": {"location": ""}, "result": {"status": "passed", "duration": 61031600}}, {"keyword": "When", "name": "ETL is executed from sources to landing zone", "line": 17, "match": {"location": ""}, "result": {"status": "passed", "duration": 61700}}, {"keyword": "Then", "name": "all albums from type 1 source arrive in the landing zone", "line": 18, "match": {"location": ""}, "result": {"status": "passed", "duration": 58100}}]}, {"keyword": "Scenario", "id": "test_customer_etl", "name": "Customer ETL", "line": 20, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "a type 1 source file", "line": 21, "match": {"location": ""}, "result": {"status": "passed", "duration": 38137100}}, {"keyword": "When", "name": "ETL is executed from sources to landing zone", "line": 22, "match": {"location": ""}, "result": {"status": "passed", "duration": 51499}}, {"keyword": "Then", "name": "all customers from type 1 source arrive in the landing zone", "line": 23, "match": {"location": ""}, "result": {"status": "passed", "duration": 33700}}]}]}, {"keyword": "Feature", "uri": "features\\source_2_to_landing_zone.feature", "name": "Source 2 to Landing Zone", "id": "features\\source_2_to_landing_zone.feature", "line": 3, "description": "", "tags": [{"name": "source_to_landing_zone", "line": 2}], "elements": [{"keyword": "Scenario", "id": "test_order_etl", "name": "Order ETL", "line": 5, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "a type 2 source file", "line": 6, "match": {"location": ""}, "result": {"status": "passed", "duration": 41321599}}, {"keyword": "When", "name": "ETL is executed from sources to landing zone", "line": 7, "match": {"location": ""}, "result": {"status": "passed", "duration": 47499}}, {"keyword": "Then", "name": "all orders from type 2 source arrive in the landing zone", "line": 8, "match": {"location": ""}, "result": {"status": "failed", "error_message": "fixturefunc = <function _ at 0x000001411D72AFC0>, request = <FixtureRequest for <Function test_order_etl>>\nkwargs = {'scenario_context': {'core_cur': <cursor object at 0x000001411D7DC040; closed: 0>, 'landing_zone_cur': <cursor object...0}, 'Customer': {'FirstName': 'Millard', 'LastName': 'Fillmore'}, 'OrderLocation': 'Birmingham', 'Temperature': 10}]}}}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\nvenv\\Lib\\site-packages\\_pytest\\fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nscenario_context = {'core_cur': <cursor object at 0x000001411D7DC040; closed: 0>, 'landing_zone_cur': <cursor object at 0x000001411D7DC12...10}, 'Customer': {'FirstName': 'Millard', 'LastName': 'Fillmore'}, 'OrderLocation': 'Birmingham', 'Temperature': 10}]}}\n\n    @then(\"all orders from type 2 source arrive in the landing zone\")\n    def _(scenario_context: dict):\n        # Get all orders in the landing zone\n        landing_zone_cur = scenario_context['landing_zone_cur']\n        sql = \"\"\"SELECT full_name, first_name, last_name, band_name, album_name, order_location FROM orders\n                JOIN customers ON orders.customer_id = customers.customer_id\n                JOIN albums ON customers.album_id = albums.album_id\n                \"\"\"\n        landing_zone_cur.execute(sql)\n        lz_orders = landing_zone_cur.fetchall()\n    \n        # Get source 2\n        source_2 = scenario_context['source_2']\n    \n        # Verify all orders from source 2 are in the landing zone\n        for source_2_order in source_2[\"Orders\"]:\n            found = False\n            for lz_order in lz_orders:\n                lz_first_name = lz_order[1]\n                lz_last_name = lz_order[2]\n                if not lz_order[0] == \"\":\n                    lz_first_name = lz_order[0].split(' ')[0]\n                    lz_last_name = lz_order[0].split(' ')[1]\n                if (source_2_order[\"Customer\"][\"FirstName\"] == lz_first_name and\n                    source_2_order[\"Customer\"][\"LastName\"] == lz_last_name and\n                    source_2_order[\"OrderLocation\"] == lz_order[5] and\n                    source_2_order[\"Album\"][\"AlbumName\"] == lz_order[4] and\n                    source_2_order[\"Album\"][\"BandName\"] == lz_order[3]):\n                    found = True\n            error_message = \"Order from source 2 was not found in landing zone: \" + source_2_order[\"Customer\"][\"FirstName\"] + ', ' + source_2_order[\"Customer\"][\"LastName\"] + ', ' + source_2_order[\"OrderLocation\"] + ', ' + source_2_order[\"Album\"][\"BandName\"] + ', ' + source_2_order[\"Album\"][\"AlbumName\"]\n            found = False ################################################################################################################################################################\n>           assert found == True, error_message\nE           AssertionError: Order from source 2 was not found in landing zone: Benjamin, Harrison, London, Lady Gaga, The Fame Monster\nE           assert False == True\n\ntests\\steps\\test_source_2_to_landing_zone.py:39: AssertionError", "duration": 2832499}}]}, {"keyword": "Scenario", "id": "test_album_etl", "name": "Album ETL", "line": 10, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "a type 2 source file", "line": 11, "match": {"location": ""}, "result": {"status": "passed", "duration": 56336900}}, {"keyword": "When", "name": "ETL is executed from sources to landing zone", "line": 12, "match": {"location": ""}, "result": {"status": "passed", "duration": 47899}}, {"keyword": "Then", "name": "all albums from type 2 source arrive in the landing zone", "line": 13, "match": {"location": ""}, "result": {"status": "passed", "duration": 2384400}}]}, {"keyword": "Scenario", "id": "test_customer_etl", "name": "Customer ETL", "line": 15, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "a type 2 source file", "line": 16, "match": {"location": ""}, "result": {"status": "passed", "duration": 61569000}}, {"keyword": "When", "name": "ETL is executed from sources to landing zone", "line": 17, "match": {"location": ""}, "result": {"status": "passed", "duration": 54299}}, {"keyword": "Then", "name": "all customers from type 2 source arrive in the landing zone", "line": 18, "match": {"location": ""}, "result": {"status": "failed", "error_message": "fixturefunc = <function _ at 0x000001411D72B380>, request = <FixtureRequest for <Function test_customer_etl>>\nkwargs = {'scenario_context': {'core_cur': <cursor object at 0x000001411D7DC9E0; closed: 0>, 'landing_zone_cur': <cursor object...0}, 'Customer': {'FirstName': 'Millard', 'LastName': 'Fillmore'}, 'OrderLocation': 'Birmingham', 'Temperature': 10}]}}}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\nvenv\\Lib\\site-packages\\_pytest\\fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nscenario_context = {'core_cur': <cursor object at 0x000001411D7DC9E0; closed: 0>, 'landing_zone_cur': <cursor object at 0x000001411D7DCBA...10}, 'Customer': {'FirstName': 'Millard', 'LastName': 'Fillmore'}, 'OrderLocation': 'Birmingham', 'Temperature': 10}]}}\n\n    @then(\"all customers from type 2 source arrive in the landing zone\")\n    def _(scenario_context: dict):\n        # Get customers in the landing zone\n        landing_zone_cur = scenario_context['landing_zone_cur']\n        sql = \"SELECT full_name, first_name, last_name FROM customers;\"\n        landing_zone_cur.execute(sql)\n        lz_customers = landing_zone_cur.fetchall()\n    \n        # Get source 2\n        source_2 = scenario_context['source_2']\n    \n        # Verify all customers from source 2 are in the landing zone\n        for source_2_order in source_2[\"Orders\"]:\n            source_2_first_name = source_2_order[\"Customer\"][\"FirstName\"]\n            source_2_last_name = source_2_order[\"Customer\"][\"LastName\"]\n            found = False\n            for lz_customer in lz_customers:\n                if (source_2_first_name == lz_customer[1] and\n                    source_2_last_name == lz_customer[2]):\n                    found = True\n            found = False ################################################################################################################################################################\n>           assert found == True, \"Customer from source 2 was not found in the landing zone: \" + source_2_first_name + ' ' + source_2_last_name\nE           AssertionError: Customer from source 2 was not found in the landing zone: Benjamin Harrison\nE           assert False == True\n\ntests\\steps\\test_source_2_to_landing_zone.py:82: AssertionError", "duration": 1802099}}]}]}]